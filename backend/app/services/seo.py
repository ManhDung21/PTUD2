"""Utilities for calculating simple SEO heuristics."""

from typing import List, Tuple


KEYWORDS = ['ch·∫•t l∆∞·ª£ng', 't∆∞∆°i', 'ngon', 's·∫°ch', 'dinh d∆∞·ª°ng', 'vitamin', 't·ª± nhi√™n']
CTA_WORDS = ['ƒë·∫∑t h√†ng', 'mua ngay', 'g·ªçi ngay', 'li√™n h·ªá']
EMOJIS = ['üçé', 'üçä', 'üçá', 'üçå', 'üçì', '‚ú®', 'üíé', 'üåü']


def calculate_seo_score(text: str) -> Tuple[int, List[str]]:
    """Apply heuristic scoring similar to the original Streamlit implementation."""
    score = 0
    factors: List[str] = []

    word_count = len(text.split())
    if 100 <= word_count <= 500:
        score += 30
        factors.append("‚úÖ ƒê·ªô d√†i ph√π h·ª£p")
    else:
        factors.append(f"‚ö†Ô∏è ƒê·ªô d√†i: {word_count} t·ª´ (n√™n 100-500)")

    found_keywords = sum(1 for kw in KEYWORDS if kw.lower() in text.lower())
    score += min(found_keywords * 5, 25)
    factors.append(f"‚úÖ T·ª´ kh√≥a: {found_keywords}/{len(KEYWORDS)}")

    hashtag_count = text.count('#')
    if hashtag_count >= 3:
        score += 15
        factors.append("‚úÖ C√≥ hashtags")
    else:
        factors.append("‚ö†Ô∏è Thi·∫øu hashtags")

    if any(cta in text.lower() for cta in CTA_WORDS):
        score += 15
        factors.append("‚úÖ C√≥ call-to-action")
    else:
        factors.append("‚ö†Ô∏è Thi·∫øu call-to-action")

    if any(char in text for char in EMOJIS):
        score += 15
        factors.append("‚úÖ C√≥ emoji")
    else:
        factors.append("‚ö†Ô∏è Thi·∫øu emoji")

    return score, factors
